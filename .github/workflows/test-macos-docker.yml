name: macOS Docker Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'roles/tailscale/**'
      - 'tests/molecule/macos*/**'
      - 'scripts/*macos*'
      - 'docker-compose.test.yml'
      - '.github/workflows/test-macos-docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'roles/tailscale/**'
      - 'tests/molecule/macos*/**'
      - 'scripts/*macos*'
      - 'docker-compose.test.yml'
      - '.github/workflows/test-macos-docker.yml'
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - installation
          - network
          - matrix
          - errors
      visual_mode:
        description: 'Enable visual monitoring'
        required: false
        default: false
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'
  PYTHON_VERSION: '3.11'
  ANSIBLE_VERSION: '>=2.15,<2.16'

jobs:
  # Setup and environment preparation
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.decision.outputs.should-run-tests }}
      test-matrix: ${{ steps.decision.outputs.test-matrix }}
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine test execution
      id: decision
      run: |
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "should-run-tests=true" >> $GITHUB_OUTPUT
          echo "test-matrix=all" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should-run-tests=true" >> $GITHUB_OUTPUT
          echo "test-matrix=${{ github.event.inputs.test_scenario || 'all' }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          # Check if core files were changed
          if git diff --name-only HEAD~1 HEAD | grep -E "(roles/tailscale|tests/molecule/macos|docker-compose)"; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
            echo "test-matrix=basic" >> $GITHUB_OUTPUT
          else
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should-run-tests=true" >> $GITHUB_OUTPUT
          echo "test-matrix=basic" >> $GITHUB_OUTPUT
        fi

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=macos-test-${{ runner.os }}-$(date +%Y%m%d)" >> $GITHUB_OUTPUT

  # Basic macOS container tests
  test-basic:
    name: Basic macOS Tests
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'

    strategy:
      fail-fast: false
      matrix:
        scenario: [macos]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ needs.setup.outputs.cache-key }}-pip

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          docker-compose \
          jq \
          curl \
          netcat \
          xvfb \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libasound2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-plugins[docker] docker-compose pytest-testinfra

    - name: Check system requirements
      run: |
        echo "=== System Information ==="
        uname -a
        docker --version
        docker-compose --version
        python --version
        ansible --version
        molecule --version

        echo "=== Docker System Info ==="
        docker system info
        docker system df

        echo "=== Check KVM Support ==="
        if [[ -e /dev/kvm ]]; then
          echo "✅ KVM device available"
          ls -la /dev/kvm
        else
          echo "⚠️  KVM device not available (expected in GitHub Actions)"
        fi

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        chmod +x scripts/*.py

    - name: Create test artifacts directory
      run: |
        mkdir -p test-artifacts
        echo "TEST_ID=$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}_${{ github.sha }}" >> test-artifacts/test-env.sh

    - name: Load test environment
      run: source test-artifacts/test-env.sh

    - name: Start macOS container
      run: |
        echo "=== Starting macOS Container ==="
        export TEST_ID=$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}
        echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

        if ./scripts/start-macos-container.sh; then
          echo "✅ Container started successfully"
          echo "CONTAINER_STARTED=true" >> $GITHUB_ENV
        else
          echo "❌ Failed to start container"
          exit 1
        fi

    - name: Wait for container to be ready
      run: |
        echo "=== Waiting for container readiness ==="
        max_attempts=30
        attempt=1

        while [[ $attempt -le $max_attempts ]]; do
          if ./scripts/check-macos-status.sh --test-id $TEST_ID | grep -q "READY"; then
            echo "✅ Container is ready"
            break
          fi

          echo "Attempt $attempt/$max_attempts: Container not ready yet..."
          sleep 30
          ((attempt++))
        done

        if [[ $attempt -gt $max_attempts ]]; then
          echo "❌ Container failed to become ready"
          ./scripts/check-macos-status.sh --test-id $TEST_ID || true
          exit 1
        fi

    - name: Capture initial screenshots
      if: github.event.inputs.visual_mode == 'true' || github.event_name == 'schedule'
      run: |
        echo "=== Capturing initial screenshots ==="
        mkdir -p test-artifacts/screenshots

        ./scripts/capture-screenshot.sh \
          --name "container-startup" \
          --output-dir test-artifacts/screenshots \
          --container "macos-test-$TEST_ID" || true

    - name: Run Molecule tests
      run: |
        echo "=== Running Molecule Tests ==="
        cd tests/molecule/${{ matrix.scenario }}

        if molecule test --scenario-name ${{ matrix.scenario }}; then
          echo "✅ Molecule tests completed successfully"
        else
          echo "❌ Molecule tests failed"
          exit 1
        fi

    - name: Capture final screenshots
      if: github.event.inputs.visual_mode == 'true' || github.event_name == 'schedule'
      run: |
        echo "=== Capturing final screenshots ==="
        ./scripts/capture-screenshot.sh \
          --name "test-completion" \
          --output-dir test-artifacts/screenshots \
          --container "macos-test-$TEST_ID" || true

    - name: Collect logs
      if: always()
      run: |
        echo "=== Collecting test logs ==="
        if ./scripts/collect-test-logs.sh --test-id $TEST_ID --archive; then
          echo "✅ Logs collected successfully"
        else
          echo "⚠️  Log collection failed"
        fi

    - name: Analyze logs
      if: always()
      run: |
        echo "=== Analyzing collected logs ==="
        if ./scripts/analyze-test-logs.py \
          --log-dir "test-artifacts/$TEST_ID/logs" \
          --output-dir "test-artifacts/$TEST_ID/analysis" \
          --verbose; then
          echo "✅ Log analysis completed"
        else
          echo "⚠️  Log analysis failed"
        fi

    - name: Stop container
      if: always()
      run: |
        echo "=== Stopping container ==="
        ./scripts/stop-macos-container.sh --test-id $TEST_ID || true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-test-artifacts-${{ matrix.scenario }}-${{ github.run_number }}
        path: |
          test-artifacts/
        retention-days: 7

    - name: Upload analysis report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-test-analysis-${{ matrix.scenario }}-${{ github.run_number }}
        path: |
          test-artifacts/*/analysis/
        retention-days: 30

  # Installation method tests
  test-installation:
    name: Installation Tests
    runs-on: ubuntu-latest
    needs: [setup, test-basic]
    if: |
      needs.setup.outputs.should-run-tests == 'true' &&
      (needs.setup.outputs.test-matrix == 'all' || needs.setup.outputs.test-matrix == 'installation' || github.event_name == 'schedule')

    strategy:
      fail-fast: false
      matrix:
        method: [go, binary, homebrew]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose jq curl
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-plugins[docker] docker-compose

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Test installation method
      run: |
        echo "=== Testing installation method: ${{ matrix.method }} ==="
        export TEST_ID="install_${{ matrix.method }}_$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}"
        echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

        if ./scripts/start-macos-container.sh; then
          cd tests/molecule/macos-installation-${{ matrix.method }}

          if molecule test --scenario-name installation-${{ matrix.method }}; then
            echo "✅ Installation test completed for ${{ matrix.method }}"
          else
            echo "❌ Installation test failed for ${{ matrix.method }}"
            exit 1
          fi
        else
          echo "❌ Failed to start container for ${{ matrix.method }} installation test"
          exit 1
        fi

    - name: Collect logs
      if: always()
      run: |
        ./scripts/collect-test-logs.sh --test-id $TEST_ID --archive || true

    - name: Stop container
      if: always()
      run: |
        ./scripts/stop-macos-container.sh --test-id $TEST_ID || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: installation-test-${{ matrix.method }}-${{ github.run_number }}
        path: test-artifacts/
        retention-days: 7

  # Network configuration tests
  test-network:
    name: Network Tests
    runs-on: ubuntu-latest
    needs: [setup, test-basic]
    if: |
      needs.setup.outputs.should-run-tests == 'true' &&
      (needs.setup.outputs.test-matrix == 'all' || needs.setup.outputs.test-matrix == 'network' || github.event_name == 'schedule')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose jq curl
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-plugins[docker] docker-compose

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Test network configuration
      run: |
        echo "=== Testing network configuration ==="
        export TEST_ID="network_$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}"
        echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

        if ./scripts/start-macos-container.sh; then
          cd tests/molecule/macos-network-config

          if molecule test --scenario-name network-config; then
            echo "✅ Network configuration tests completed"
          else
            echo "❌ Network configuration tests failed"
            exit 1
          fi
        else
          echo "❌ Failed to start container for network testing"
          exit 1
        fi

    - name: Collect logs
      if: always()
      run: |
        ./scripts/collect-test-logs.sh --test-id $TEST_ID --archive || true

    - name: Stop container
      if: always()
      run: |
        ./scripts/stop-macos-container.sh --test-id $TEST_ID || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: network-test-${{ github.run_number }}
        path: test-artifacts/
        retention-days: 7

  # Configuration matrix tests
  test-matrix:
    name: Configuration Matrix
    runs-on: ubuntu-latest
    needs: [setup, test-basic]
    if: |
      needs.setup.outputs.should-run-tests == 'true' &&
      (needs.setup.outputs.test-matrix == 'all' || needs.setup.outputs.test-matrix == 'matrix' || github.event_name == 'schedule')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose jq curl
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-plugins[docker] docker-compose

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Test configuration matrix
      run: |
        echo "=== Testing configuration matrix ==="
        export TEST_ID="matrix_$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}"
        echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

        if ./scripts/start-macos-container.sh; then
          cd tests/molecule/macos-config-matrix

          if molecule test --scenario-name config-matrix; then
            echo "✅ Configuration matrix tests completed"
          else
            echo "❌ Configuration matrix tests failed"
            exit 1
          fi
        else
          echo "❌ Failed to start container for matrix testing"
          exit 1
        fi

    - name: Collect logs
      if: always()
      run: |
        ./scripts/collect-test-logs.sh --test-id $TEST_ID --archive || true

    - name: Stop container
      if: always()
      run: |
        ./scripts/stop-macos-container.sh --test-id $TEST_ID || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: matrix-test-${{ github.run_number }}
        path: test-artifacts/
        retention-days: 7

  # Error scenario tests
  test-errors:
    name: Error Scenarios
    runs-on: ubuntu-latest
    needs: [setup, test-basic]
    if: |
      needs.setup.outputs.should-run-tests == 'true' &&
      (needs.setup.outputs.test-matrix == 'all' || needs.setup.outputs.test-matrix == 'errors' || github.event_name == 'schedule')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose jq curl
        python -m pip install --upgrade pip
        pip install ansible molecule molecule-plugins[docker] docker-compose

    - name: Make scripts executable
      run: chmod +x scripts/*.sh

    - name: Test error scenarios
      run: |
        echo "=== Testing error scenarios ==="
        export TEST_ID="errors_$(date +%Y%m%d_%H%M%S)_github_${{ github.run_number }}"
        echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

        if ./scripts/start-macos-container.sh; then
          cd tests/molecule/macos-error-scenarios

          if molecule test --scenario-name error-scenarios; then
            echo "✅ Error scenario tests completed"
          else
            echo "❌ Error scenario tests failed"
            exit 1
          fi
        else
          echo "❌ Failed to start container for error testing"
          exit 1
        fi

    - name: Collect logs
      if: always()
      run: |
        ./scripts/collect-test-logs.sh --test-id $TEST_ID --archive || true

    - name: Stop container
      if: always()
      run: |
        ./scripts/stop-macos-container.sh --test-id $TEST_ID || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: error-test-${{ github.run_number }}
        path: test-artifacts/
        retention-days: 7

  # Summary and reporting
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, test-basic, test-installation, test-network, test-matrix, test-errors]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      if: always()
      with:
        path: all-artifacts/

    - name: Generate comprehensive report
      run: |
        echo "=== Generating Test Summary ==="

        cat > test-summary.md << 'EOF'
        # macOS Docker Test Summary

        **Run**: ${{ github.run_number }}
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref }}
        **Event**: ${{ github.event_name }}
        **Timestamp**: $(date)

        ## Test Results

        EOF

        # Add results from each job
        for job in test-basic test-installation test-network test-matrix test-errors; do
          if [[ "${{ needs.$job.result }}" == "success" ]]; then
            echo "- ✅ $job: PASSED" >> test-summary.md
          elif [[ "${{ needs.$job.result }}" == "failure" ]]; then
            echo "- ❌ $job: FAILED" >> test-summary.md
          elif [[ "${{ needs.$job.result }}" == "skipped" ]]; then
            echo "- ⏭️ $job: SKIPPED" >> test-summary.md
          else
            echo "- ❓ $job: ${{ needs.$job.result }}" >> test-summary.md
          fi
        done

        cat >> test-summary.md << 'EOF'

        ## Artifacts

        - Test artifacts are available in the Actions tab
        - Analysis reports include detailed log analysis
        - Screenshots are available for visual tests

        ---
        Generated by GitHub Actions
        EOF

        echo "Summary generated:"
        cat test-summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary-${{ github.run_number }}
        path: test-summary.md
        retention-days: 30

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Cleanup old artifacts (scheduled job only)
  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    needs: [setup]
    if: github.event_name == 'schedule'

    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          // Delete artifacts older than 7 days
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 7);

          for (const artifact of artifacts.data.artifacts) {
            const createdDate = new Date(artifact.created_at);
            if (createdDate < cutoffDate) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }
          }
