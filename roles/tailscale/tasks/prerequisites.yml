# Prerequisites for Tailscale installation

- name: Check macOS version compatibility
  fail:
    msg: This role requires macOS 10.15 (Catalina) or later
  when: ansible_distribution_version is version('10.15', '<')
  tags:
  - prerequisites
  - validation

- name: Check system architecture
  fail:
    msg: 'Unsupported architecture: {{ ansible_architecture }}'
  when: ansible_architecture not in ['x86_64', 'arm64']
  tags:
  - prerequisites
  - validation

- name: Check for Go toolchain
  command: go version
  register: tailscale_go_check
  failed_when: false
  changed_when: false
  tags:
  - prerequisites
  - go_check

- name: Set Go availability fact
  set_fact:
    tailscale_go_available: '{{ tailscale_go_check.rc == 0 }}'
  tags:
  - prerequisites
  - go_check

- name: Check Go version if available
  command: go version
  register: tailscale_go_version
  when: tailscale_go_available | bool
  changed_when: false
  tags:
  - prerequisites
  - go_check

- name: Display Go version information
  debug:
    var: tailscale_go_version.stdout_lines
  when: tailscale_go_available | bool
  tags:
  - prerequisites
  - go_check

- name: Check for Homebrew
  command: brew --version
  register: tailscale_homebrew_check
  failed_when: false
  changed_when: false
  tags:
  - prerequisites
  - homebrew_check

- name: Set Homebrew availability fact
  set_fact:
    tailscale_homebrew_available: '{{ tailscale_homebrew_check.rc == 0 }}'
  tags:
  - prerequisites
  - homebrew_check

- name: Validate installation method
  assert:
    that:
    - tailscale_installation_method in ['go', 'binary', 'homebrew']
    fail_msg: 'Invalid installation method: {{ tailscale_installation_method }}. Must
      be one of: go, binary, homebrew'
    success_msg: Installation method {{ tailscale_installation_method }} is
      valid
  tags:
  - prerequisites
  - validation

- name: Determine effective installation method
  set_fact:
    tailscale_effective_installation_method: >-
      {%- if tailscale_installation_method == 'go' and tailscale_go_available | bool
      -%}
        go
      {%- elif tailscale_installation_method == 'homebrew' and tailscale_homebrew_available
      | bool -%}
        homebrew
      {%- else -%}
        binary
      {%- endif -%}
  tags:
  - prerequisites
  - method_selection

- name: Display effective installation method
  debug:
    msg: 'Using installation method: {{ tailscale_effective_installation_method }}'
  tags:
  - prerequisites
  - method_selection

- name: Check network connectivity to GitHub API
  uri:
    url: '{{ tailscale_api_base_url }}/repos/tailscale/tailscale/releases/latest'
    method: HEAD
    timeout: 10
    validate_certs: true
  register: tailscale_github_connectivity
  failed_when: false
  tags:
  - prerequisites
  - connectivity

- name: Check network connectivity to Tailscale downloads
  uri:
    url: '{{ tailscale_download_base_url }}/'
    method: HEAD
    timeout: 10
    validate_certs: true
  register: tailscale_download_connectivity
  failed_when: false
  tags:
  - prerequisites
  - connectivity

- name: Validate network connectivity
  assert:
    that:
    - tailscale_github_connectivity.status == 200 or
      tailscale_download_connectivity.status == 200
    fail_msg: Cannot connect to Tailscale download servers. Please check your
      internet connection.
    success_msg: Network connectivity to Tailscale servers verified
  tags:
  - prerequisites
  - connectivity

- name: Check if Tailscale is already installed
  command: '{{ tailscale_binary_path }} version'
  register: tailscale_current_version
  failed_when: false
  changed_when: false
  tags:
  - prerequisites
  - version_check

- name: Set fact for current Tailscale version
  set_fact:
    tailscale_is_installed: '{{ tailscale_current_version.rc == 0 }}'
    tailscale_current_version_string: "{{ tailscale_current_version.stdout_lines[0]
      | default('unknown') }}"
  tags:
  - prerequisites
  - version_check

- name: Display current Tailscale version
  debug:
    msg: 'Current Tailscale version: {{ tailscale_current_version_string }}'
  when: tailscale_is_installed | bool
  tags:
  - prerequisites
  - version_check

- name: Check if update is needed
  set_fact:
    tailscale_update_needed: >-
      {%- if tailscale_version == 'latest' -%}
        true
      {%- elif not tailscale_is_installed -%}
        true
      {%- elif tailscale_force_update -%}
        true
      {%- else -%}
        {{ tailscale_current_version_string != tailscale_version }}
      {%- endif -%}
  tags:
  - prerequisites
  - version_check

- name: Skip installation if Tailscale is up to date
  debug:
    msg: Tailscale {{ tailscale_current_version_string }} is already installed
      and up to date
  when:
  - tailscale_is_installed | bool
  - not tailscale_update_needed | bool
  - not tailscale_force_restart
  tags:
  - prerequisites
  - version_check

- name: Create necessary directories
  file:
    path: '{{ item }}'
    state: directory
    mode: '0755'
    owner: root
    group: wheel
  loop:
  - '{{ tailscale_state_dir }}'
  - '{{ tailscale_log_dir }}'
  - /var/run/tailscale
  when: tailscale_create_directories | bool
  become: true
  tags:
  - prerequisites
  - directories

- name: Create Tailscale user if it doesn't exist
  user:
    name: '{{ tailscale_user }}'
    system: true
    shell: /usr/bin/false
    home: '{{ tailscale_state_dir }}'
    create_home: false
  become: true
  tags:
  - prerequisites
  - user_setup
